sem = sigma /sqrt (m)
sem = sigma /sqrt (n)
sem = sigma /sqrt (m)
sem
help(qnorm)
E = qnorm (.975)*sem
E
xbar = mean(height.response)
xbar + c(-E,+E)
data.file <- file.path('data', 'C:\Users\alfanro001\Documents\my\SALES\MEASURE_SET_SALES.csv')
data.file <- file.path('data', 'C:\\Users\\alfanro001\\Documents\\my\\SALES\\MEASURE_SET_SALES.csv')
sales <- read.csv (data.file,header = TRUE,sep = ',');
sales <- read.csv (data.file, header = TRUE,sep = ',');
MEASURE_SET_SALES <- read.csv("~/my/SALES/MEASURE_SET_SALES.csv")
View(MEASURE_SET_SALES)
data.file <- file.path('data', 'C:\\Users\\alfanro001\\Documents\\my\\SALES\\MEASURE_SET_SALES.csv')
View(MEASURE_SET_SALES)
View(MEASURE_SET_SALES)
qty <- with(MEASURE_SET_SALES,QTY_TOT)
summary(qty)
quantile(qty)
quantile(qty,probs = seq (0,1,0.20))
library('ggplot2')
library("graphics", lib.loc="C:/Revolution/R-Community-6.2/R-2.15.3/library")
ggplot
install.packages("ggplot2")
library('ggplot2')
ggplot(MEASURE_SET_SALES, aes (x=QTY_TOT))
sales <- read.csv('C:\Users\alfanro001\Documents\my\SALES\MEASURE_SET_SALES.csv')
MEASURE_SET_SALES <- read.csv("~/my/SALES/MEASURE_SET_SALES.csv")
View(MEASURE_SET_SALES)
library('ggplot2')
ggplot(MEASURE_SET_SALES, aes(x = QTY_TOT))+ geom_histogram(binwidth = 1)
y <- if (x > 3) {}
y <- if (x > 3) {10} else {1}
x <- 10
y <- if (x > 3) {10} else {1}
y
for (i in 1:10) {print(i)}
z <- c("a", "b" , "c" , "d")
for (letter in z) {print(z)}
for (letter in z) {print(letter)}
for (i in seq_along(z)) {z[i]}
for (i in seq_along(z)) {print (z[i])}
m <- matrix (1:6, nrow=2, ncol=3)
nrow(m)
seq_len(nrow(m))
add2 <- function (x,y) {
x + y
}
add2(5,6)
above <- function (x, n) {
use <- x > n
x [use]
}
v <- 1:20
above (v)
above (v, 5)
above <- function (x, n = 10) {
use <- x > n
x [use]
}
above (v)
columnmean <- function (y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean (y [, i])
}
means
}
columnmean (airquality)
columnmean <- function (y, removeNA =TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean (y [, i], na.rn = removeNA)
}
means
}
columnmean (airquality)
columnmean (airquality)
columnmean <- function (y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean (y [, i], na.rm = removeNA)
}
means
}
columnmean (airquality)
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0,10,by=5)
seq(0,10,by=0.5)
seq(0,5,length=30)
my_seq <- seq(0,5,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
my_data <- rnorm(100)
my_data
sd (x = my_data)
args(lm)
lm?
\\
?lm
f <- function (a,b) {a^2}
f(2)
myplot <- function (x, y, type = 1, ...) {plot(x,y,type=type,...)}
mean
args(paste)
paste(c(1,2), "a", sep = " ")
search()
make.power <- function (n) {
pow <- function (x) {
x^n
}
pow
}
square <- make.power (2)
square (4)
ls (environments(square))
ls (environment(square))
optimize?
?optimize
?optim
make.negLog <- function (data, fixed = c(FALSE, FALSE)) {
params <- fixed
function (p) {
params [!fixed] <- p
mu <- params [1]
sigma <- parms [2]
a <- -0.5 * length (data) * log (2 * pi * sigma^2)
2 <- -0.5 * sum ((data-mu)^2) / (sigma^2)
- (a+b)
}
}
set.seed(1)
normals <- rnorm (100,1,2)
nLL <- make.negLog(normals)
nLL
ls(environment(nLL))
optim(c(1,2), nLL)
optim(c(mu=0,sigma=1), nLL)
optim(c(mu=0,sigma=1), nLL)$par
make.negLog <- function (data, fixed = c(FALSE, FALSE)) {
params <- fixed
function (p) {
params [!fixed] <- p
mu <- params [1]
sigma <- params [2]
a <- -0.5 * length (data) * log (2 * pi * sigma^2)
2 <- -0.5 * sum ((data-mu)^2) / (sigma^2)
- (a+b)
}
}
optim(c(mu=0,sigma=1), nLL)$par
make.negLog <- function (data, fixed = c(FALSE, FALSE)) {
params <- fixed
function (p) {
params [!fixed] <- p
mu <- params [1]
sigma <- params [2]
a <- -0.5 * length (data) * log (2 * pi * sigma^2)
2 <- -0.5 * sum ((data-mu)^2) / (sigma^2)
- (a+b)
}
}
optim(c(mu=0,sigma=1), nLL)$par
make.negLog <- function (data, fixed = c(FALSE, FALSE)) {
params <- fixed
function (p) {
params [!fixed] <- p
mu <- params [1]
sigma <- params [2]
a <- -0.5 * length (data) * log (2 * pi * sigma^2)
2 <- -0.5 * sum ((data-mu)^2) / (sigma^2)
- (a+b)
}
}
nLL <- make.negLog(normals)
optim(c(mu=0,sigma=1), nLL)$par
make.negLog <- function (data, fixed = c(FALSE, FALSE)) {
params <- fixed
function (p) {
params [!fixed] <- p
mu <- params [1]
sigma <- params [2]
a <- -0.5 * length (data) * log (2 * pi * sigma^2)
b <- -0.5 * sum ((data-mu)^2) / (sigma^2)
- (a+b)
}
}
nLL <- make.negLog(normals)
optim(c(mu=0,sigma=1), nLL)$par
nLL <- make.negLog(normals, c(FALSE,2))
optimize(nLL,c(-1,3))$minimum
x <- as.Date("1970-01-01")
x
x <- sys.time()
x <- sys.Time()
x <- Sys.time()
p <- as.POSIXlt(x)
names(unclass(p))
p$sec
datestring <- strptime("December 12, 2011 20:11:12")
datestring <- strptime(c("December 12, 2011 20:11")
datestring <- strptime(c("December 12, 2011 20:11"))
datestring <- strptime(c("December 12, 2011 20:11"))
datestring <- c("December 12, 2011 20:11")
strptime(datestring,"%B %d, %Y %H:%M")
x<- c("a", "b", "c")
for (i in seq_along(x)) {print(x[i])}
x <- 1:10
if (x > 5) {print(x)}
x <-1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 5)
x <- list (a=matrix (1:4,2,2),b=matrix(1:6,3,2))
x
lapply(x,function(elt) elt[,1])
lapply(s,function(elt) elt[,1])
sapply(x,function(elt) elt[,1])
x <- list (a=matrix (1:4,2,2),b=matrix(1:6,2,2))
sapply(x,function(elt) elt[,1])
c <- array (rnorm(2*2*10), c(2,2,10))
c
rnorm(10)
x <- c(rnorm(10), rnorm (3), rnotm (5))
x <- c(rnorm(10), rnorm (3), runif (5))
x <- c(rnorm(10), rnorm (10), runif (10))
f <- gl(3,10)
f
split(x,f)
lapply(split(x,f),mean)
library (datasets)
head(airquality)
airquality$month
airquality$Month
s <- split(airquality,airquality$5)
s <- split(airquality,airquality$Month)
s
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R")]))
x
f1<-gl(2,5)
f2<-gl(5,2)
f1
f2
str(split(x,list(f1,f2)))
x[1.1]
x[2.1]
f2
str(split(x,list(f1,f2)))
x<-rnorm(10)
str(split(x,list(f1,f2)))
gl(a=
)
traceback
mean (x)
mean (z)
traceback()
lm(y - x)
traceback()
lm(y - z)
traceback()
lm(a - z)
traceback()
debug(lm)
lm(a - z)
exit
quit
?debug
library(swirl)
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- num_vect[<1]
tf <- num_vect[num_vect<1]
tf <- num_vect<1
tf
num_vect>=6
my_char <- c("My", "name", "is")
my_char
paste (my_char, collapse= " ")
my_name <- c(my_char, "Rosario")
my_name
pasete(my_name, collapse= " ")
paste(my_name, collapse= " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="_")
paste(LETTERS,1:4,sep="-")
library(swirl)
swirl()
x <-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
dnorm(100,2,4)
dnorm(3,2,4)
dnorm(2,2,4)
x <- dnorm (1:100,2,4)
x
x <- dnorm (1:100,50,4)
x
x <- dnorm (1:100,50,4)
x rbinom (100, 1, 0.5)
x <- rbinom (100, 1, 0.5)
x
x <- rep(0:1, 5)
x
set.seed(1)
rpois(5,2)
set.seed(2)
rpois(5,2)
set.seed(123)
DT <- data.table(x=sample(letters([1:3],1E5,TRUE)
DT <- data.table(x=sample(letters([1:3],1E5,TRUE))
library(TABLE)
library(Table)
library(table)
DT <- data.table(x=sample(letters([1:3],1E5,TRUE))
DT <- data.table(x=sample(letters[1:3],1E5,TRUE))
url1 <- file.download("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url,destfile="./idaho.csv")
library(data.table)
install.package(data.table)
install.packages(data.table)
install.packages("data.table")
library(data.table)
install.packages("forecast", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("data.table", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(data.table)
install.packages("Rcpp", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(data.table)
install.packages("data.table", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(data.table)
library(data.table)
install.packages("data.table"
)
install.packages("data.table", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
Sys.getenv("http_proxy")
install.packages("data.table", repos="http://R-Forge.R-project.org")
library(data.table)
install.packages("Rcpp", repos="http://R-Forge.R-project.org")
library(data.table)
install.packages("data.table", repos="http://R-Forge.R-project.org")
library(data.table)
install.packages("Rccp")
install.packages("Rcpp")
library(data.table)
my_table <- fread("./idaho.csv")
head(my_table)
my_table[my_table$VAL = 24,]
my_table [my_table$VAL == 24,]
my_table [my_table$VAL == 24,.N,by=VAL]
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
colidx <- 7:15
rowidx <- 18:23
urlx <- file.download("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
urlx <- file.downloads("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
urlx <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
urlx <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(urlx,destfile="./xls")
dat <- read.xlsx("./xls", colIndex=7:15, rowIndex=18:23)
dat <- read.xlsx("./xls", colIndex=7:15, rowIndex=18:23,sheetIndex=1)
download.file(urlx,destfile="./.nag.xlsx")
download.file(urlx,destfile="./nag.xlsx")
dat <- read.xlsx("./nag.xlsx", colIndex=7:15, rowIndex=18:23,sheetIndex=1)
dat <- read.xlsx("./NGAP.xlsx", colIndex=7:15, rowIndex=18:23,sheetIndex=1)
sum(dat$Zip*dat$Ext,na.rm=T)
br <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(br,destfile="./br.xml")
install.packages("XML")
library(XML)
file_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(file_url, useInternal=TRUE)
doc <- xmlTreeParse(file_url)
doc <- xmlTreeParse("./br.xml")
rootNode <- xmlRoot (doc)
xpathSApply(rootNode,"//zipcode",xmlValue)
doc <- xmlTreeParse("./br.xml",useInternalNodes=TRUE)
rootNode <- xmlRoot (doc)
xpathSApply(rootNode,"//zipcode",xmlValue)
xpathSApply(rootNode,"//zipcode",function(x){print(x)})
xpathSApply(rootNode,"//zipcode",function(x){print(xmlValue(x)})
xpathSApply(rootNode,"//zipcode",function(x){print(xmlValue(x)})
xpathSApply(rootNode,"//zipcode",function(x){print(xmlValue(x))})
xpathSApply(rootNode,"//zipcode",function(x){print(xmlValue(x)==21231)})
xpathSApply(rootNode,"//zipcode",function(x){sum(print(xmlValue(x)==21231))})
sum(xpathSApply(rootNode,"//zipcode",function(x){print(xmlValue(x)==21231)}))
sum(xpathSApply(rootNode,"//zipcode",function(x){xmlValue(x)==21231}))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
DT <- fread(url)
head(Dt)
head(DT)
install.packages("RMySQL")
uscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
uscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
load(RMySQL)
library(RMySQL)
uscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
allt <- dbListTables(uscD)
allt <- dbListTables(uscDb)
uscDb <- dbConnect(MySQL(),user="hg19", host="genome-mysql.cse.ucsc.edu")
uscDb <- dbConnect(MySQL(),user="genome", db="dg19", host="genome-mysql.cse.ucsc.edu")
uscDb <- dbConnect(MySQL(),user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allt <- dbListTables(uscDb)
allt[1:5]
dbGetQuery(uscDb, "select count(1) from acembly")
dbReadTable(uscDb, "acembly")
q <- dbSendQuery(uscDb, "select * from acembly")
fetch(q,10)
dbDisconnect(uscDb)
library(data.table)
setwd(".\\my\\Coursera - Data_Science\\3. Data Cleaning\\week2\\getdata-projectfiles-UCI HAR Dataset\\UCI HAR Dataset")
##Read the activities label:
df_activity_labels <- read.table("activity_labels.txt")
##Rename the activity labels table columns:
names(df_activity_labels)[names(df_activity_labels) == "V1"] = "Activity"
names(df_activity_labels)[names(df_activity_labels) == "V2"] = "Activity_Name"
##Read the features
df_features <- read.table("features.txt",stringsAsFactors = FALSE)
##Read the test subset
setwd(".\\test")
df_X_test <- read.table("X_test.txt")
df_Y_test <- read.table("Y_test.txt")
df_subject_test <- read.table("subject_test.txt")
##Read the train subset
setwd("..\\train")
df_X_train <- read.table("X_train.txt")
df_Y_train <- read.table("Y_train.txt")
df_subject_train <- read.table("subject_train.txt")
##transform the datasets into data.table
table.test <- data.table (Activity=df_Y_test,Subject=df_subject_test,df_X_test)
table.train <- data.table (Activity=df_Y_train,Subject=df_subject_train,df_X_train)
##merge the 2 datasets
table.all <- rbind (table.test, table.train)
##Rename the activity field and subject (by default it has .V1 suffix)
setnames(table.all,"Activity.V1", "Activity")
setnames(table.all,"Subject.V1", "Subject")
table.all.withactivity <- merge (table.all,df_activity_labels,by="Activity")
for (v in 1:561) setnames(table.all.withactivity, paste("V",v, sep=""), as.character(df_features[v,"V2",drop=FALSE]))
df_features.only_mean_and_std <- df_features [grepl("mean\\(\\)",df_features$V2) | grepl("std\\(\\)",df_features$V2),"V2"]
df_features.only_mean_and_std <- c(df_features.only_mean_and_std, "Activity_Name", "Subject")
table.final <- table.all.withactivity[,"Activity_Name",as.vector(df_features.mean.std),with=FALSE]
head(table.final)
table.final <- table.all.withactivity[,as.vector(df_features.mean.std),with=FALSE]
table.final <- table.all.withactivity[,as.vector(df_features.only_mean_and_std),with=FALSE]
head(table.final)
table.final.mean <- table.all.withactivity[,mean (as.vector(df_features.only_mean_and_std)),with=FALSE]
mean(c(1,2,3),c(4,5,6))
mean(c(1,2,3)
)
table.final.mean <- table.all.withactivity[,mean (as.vector(df_features.only_mean_and_std))]
table.final.mean <- table.all.withactivity[,list(mean (as.vector(df_features.only_mean_and_std))]
table.final.mean <- table.all.withactivity[,list(mean (as.vector(df_features.only_mean_and_std)))]
table.final.mean <- table.all.withactivity[,as.vector(df_features.only_mean_and_std)]
head(table.final.mean)
table.final.mean <- table.all.withactivity[,as.vector(df_features.only_mean_and_std),with=FALSE]
head(table.final.mean)
?rowMeans
table.final.mean[,lapply(list(table.final.mean[1:ncol(dt)-2]),mean),by=Activity_Name,Subject]
table.final.mean[,lapply(list(table.final.mean[1:ncol(dt)-2]),mean),by=Activity_Name]
table.final.mean[,lapply(list(table.final.mean[1:ncol(table.final.mean)-2]),mean),by=Activity_Name]
ncol(table.final.mean)
list(table.final.mean[1:ncol(table.final.mean)-2])
list(table.final.mean[1:ncol(table.final.mean)])
list(table.final.mean[1:ncol(table.final.mean)-1])
list(table.final.mean[,1:ncol(table.final.mean)-2])
table.final.mean[,1:ncol(table.final.mean)-2]
?data.table
?data.table
table.final.mean[,lapply(.SD,mean),by=Activity_Name]
table.final.mean[,lapply(.SD,mean),by=Activity_Name,Subject]
setkey(table.final.mean,Activity_Name)
setkey(table.final.mean,Subject)
table.final.mean[,lapply(.SD,mean),by=]
table.final.mean[,lapply(.SD,mean)]
table.final.mean[,lapply(.SD,mean),by=Activity_Name,Subject]
table.final.mean[,lapply(.SD,mean),keyby]
table.final.mean[,lapply(.SD,mean),by=list(Activity_Name,Subject)]
head(table.final.mean[,lapply(.SD,mean),by=list(Activity_Name,Subject)])
table.final.mean <- table.final[,lapply(.SD,mean),by=list(Activity_Name,Subject)]
table.final.mean
rowNums(table.final.mean)
rowNum(table.final.mean)
numRows(table.final.mean)
